//Самостоятельная работа 2, С18

#include <iostream>
using namespace std;

int main() {
    int num, ones, tens, hundreds;
    string ones_arr[] = {"", "один", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять"};
    string tens_arr[] = {"", "десять", "двадцать", "тридцать", "сорок", "пятьдесят", "шестьдесят", "семьдесят", "восемьдесят", "девяносто"};
    string hundreds_arr[] = {"", "сто", "двести", "триста", "четыреста", "пятьсот", "шестьсот", "семьсот", "восемьсот", "девятьсот"};

    cout << "Введите целое число от 100 до 999: ";
    cin >> num;

    ones = num % 10;
    tens = (num / 10) % 10;
    hundreds = num / 100;

    cout << hundreds_arr[hundreds] << " ";
    if (tens == 1) {
        cout << ones_arr[ones + 1] << endl;
    } else {
        cout << tens_arr[tens] << " " << ones_arr[ones] << endl;
    }

    return 0;
}



//Самостоятельная работа 2, С19

#include <iostream>
using namespace std;

int main() {
    string colors[] = {"зеленый", "красный", "желтый", "белый", "черный"};
    string animals[] = {"крысы", "коровы", "тигра", "зайца", "дракона", "змеи", "лошади", "овцы", "обезьяны", "курицы", "собаки", "свиньи"};

    int year;
    cout << "Введите год: ";
    cin >> year;

    int start_year = 1984;
    int cycle_length = 60;
    int color_index = (year - start_year) % cycle_length / 12;
    int animal_index = (year - start_year) % 12;

    cout << "Год " << year << " - это год " << colors[color_index] << " " << animals[animal_index] << endl;

    return 0;
}



//Самостоятельная работа 2, С20

#include <iostream>
using namespace std;

int main() {
    int day, month;
    cout << "Введите день и месяц: ";
    cin >> day >> month;

    if ((month == 1 && day >= 20) || (month == 2 && day <= 18)) {
        cout << "Водолей" << endl;
    } else if ((month == 2 && day >= 19) || (month == 3 && day <= 20)) {
        cout << "Рыбы" << endl;
    } else if ((month == 3 && day >= 21) || (month == 4 && day <= 19)) {
        cout << "Овен" << endl;
    } else if ((month == 4 && day >= 20) || (month == 5 && day <= 20)) {
        cout << "Телец" << endl;
    } else if ((month == 5 && day >= 21) || (month == 6 && day <= 21)) {
        cout << "Близнецы" << endl;
    } else if ((month == 6 && day >= 22) || (month == 7 && day <= 22)) {
        cout << "Рак" << endl;
    } else if ((month == 7 && day >= 23) || (month == 8 && day <= 22)) {
        cout << "Лев" << endl;
    } else if ((month == 8 && day >= 23) || (month == 9 && day <= 22)) {
        cout << "Дева" << endl;
    } else if ((month == 9 && day >= 23) || (month == 10 && day <= 22)) {
        cout << "Весы" << endl;
    } else if ((month == 10 && day >= 23) || (month == 11 && day <= 21)) {
        cout << "Скорпион" << endl;
    } else if ((month == 11 && day >= 22) || (month == 12 && day <= 21)) {
        cout << "Стрелец" << endl;
    } else if ((month == 12 && day >= 22) || (month == 1 && day <= 19)) {
        cout << "Козерог" << endl;
    } else {
        cout << "Некорректная дата" << endl;
    }

    return 0;
}



//Самостоятельная базовая 3, F33

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Введите целое число N (> 1): ";
    cin >> n;

    int fib1 = 1, fib2 = 1, fib3;
    cout << "Последовательность чисел Фибоначчи: ";
    cout << fib1 << " " << fib2 << " ";

    for (int i = 3; i <= n; i++) {
        fib3 = fib1 + fib2;
        cout << fib3 << " ";
        fib1 = fib2;
        fib2 = fib3;
    }

    return 0;
}



//Самостоятельная базовая 3, F34

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Введите целое число N (> 1): ";
    cin >> n;

    double a1 = 1, a2 = 2, a3;
    cout << "Последовательность чисел Ак: ";
    cout << a1 << " " << a2 << " ";

    for (int i = 3; i <= n; i++) {
        a3 = a1 + 2.0 / (4 * a2 - 3);
        cout << a3 << " ";
        a1 = a2;
        a2 = a3;
    }

    return 0;
}



//Самостоятельная базовая 3, F35

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Введите целое число N (> 2): ";
    cin >> n;

    int a1 = 1, a2 = 2, a3 = 3;
    cout << "Последовательность чисел Ак: ";
    cout << a1 << " " << a2 << " " << a3 << " ";

    for (int i = 4; i <= n; i++) {
        int a = a3 + 2 * (a2 - a1);
        cout << a << " ";
        a1 = a2;
        a2 = a3;
        a3 = a;
    }

    return 0;
}



//Самостоятельная базовая 3, F36

#include <iostream>
using namespace std;

int main() {
    int n, k;
    cout << "Введите целые числа N и K: ";
    cin >> n >> k;

    double sum = 0;
    for (int i = 1; i <= n; i++) {
        double term = 1;
        for (int j = 1; j <= k; j++) {
            term *= i;
        }
        sum += term;
    }

    cout << "Сумма: " << sum << endl;

    return 0;
}



//Самостоятельная базовая 3, F37

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Введите целое число N (> 0): ";
    cin >> n;

    double sum = 0;
    for (int i = 1; i <= n; i++) {
        double term = 1;
        for (int j = 1; j <= i; j++) {
            term *= i;
        }
        sum += term;
    }

    cout << "Сумма: " << sum << endl;

    return 0;
}



//Самостоятельная базовая 3, F38

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Введите целое число N (> 0): ";
    cin >> n;

    double sum = 0;
    for (int i = 1; i <= n; i++) {
        double term = 1;
        for (int j = 1; j <= i; j++) {
            term *= i;
        }
        sum += term;
    }

    cout << "Сумма: " << sum << endl;

    return 0;
}



//Самостоятельная базовая 3, F39

#include <iostream>
using namespace std;

int main() {
    int a, b;
    cout << "Введите целые числа A и B (A < B): ";
    cin >> a >> b;

    for (int i = a; i <= b; i++) {
        for (int j = 1; j <= i; j++) {
            cout << i << " ";
        }
        cout << endl;
    }

    return 0;
}



//Самостоятельная базовая 3, W24

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Введите целое число N (> 1): ";
    cin >> n;

    int a = 1, b = 1, c;
    while (b < n) {
        c = a + b;
        a = b;
        b = c;
    }

    if (b == n) {
        cout << "True" << endl;
    } else {
        cout << "False" << endl;
    }

    return 0;
}



//Самостоятельная базовая 4, 4.11

#include <iostream>
using namespace std;

int main() {
    int n, m;
    cout << "Введите количество строк матрицы N: ";
    cin >> n;
    cout << "Введите количество столбцов матрицы M: ";
    cin >> m;

    int A[n][m];
    cout << "Введите элементы матрицы:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> A[i][j];
        }
    }

    int x, count = 0;
    cout << "Введите число для поиска: ";
    cin >> x;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (A[i][j] == x) {
                count++;
            }
        }
    }

    if (count > 0) {
        cout << "Число " << x << " найдено " << count << " раз" << endl;
    } else {
        cout << "Число " << x << " не найдено" << endl;
    }

    return 0;
}




//Самостоятельная базовая 4, 4.12 

#include <iostream>
#include <cmath>
using namespace std;

int main() {
    const int n = 5, m = 10;
    int A[n][m];
    cout << "Введите элементы матрицы:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> A[i][j];
        }
    }

    int minElem = abs(A[0][0]);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (abs(A[i][j]) < minElem) {
                minElem = abs(A[i][j]);
            }
        }
    }

    double B[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            B[i][j] = A[i][j] / static_cast<double>(minElem);
        }
    }

    cout << "Новая матрица:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cout << B[i][j] << "\t";
        }
        cout << endl;
    }

    return 0;
}




//Самостоятельная базовая 4, 4.13

#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    const int n = 5, m = 10;
    int A[n][m];
    cout << "Введите элементы матрицы:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> A[i][j];
        }
    }

    int minElem = A[0][0];
    int minRow = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (A[i][j] < minElem) {
                minElem = A[i][j];
                minRow = i;
            }
        }
    }

    int B[n+1][m];
    for (int i = 0; i <= minRow; i++) {
        for (int j = 0; j < m; j++) {
            B[i][j] = A[i][j];
        }
    }
    for (int j = 0; j < m; j++) {
        B[minRow+1][j] = A[0][j];
    }
    for (int i = minRow+1; i < n; i++) {
        for (int j = 0; j < m; j++) {
            B[i+1][j] = A[i][j];
        }
    }

    cout << "Новая матрица:" << endl;
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j < m; j++) {
            cout << B[i][j] << "\t";
        }
        cout << endl;
    }

    return 0;
}




//Самостоятельная базовая 4, 4.14

#include <iostream>
using namespace std;

int main() {
    const int n = 5;
    int B[n][n];
    cout << "Введите элементы матрицы:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> B[i][j];
        }
    }

    int product = 1;
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i; j++) {
            product *= B[i][j];
        }
    }

    cout << "Произведение элементов, расположенных ниже левой диагонали: " << product << endl;

    return 0;
}




//Самостоятельная базовая 5, 10.4(1,2) 

1)
#include <iostream>
using namespace std;

int main()
{
    int a, b, x, y;

    // вводим значения a и b
    cout << "Enter a: ";
    cin >> a;
    cout << "Enter b: ";
    cin >> b;

    // вычисляем x и y, минимальные значения из a и 3b-2a-b
    if (a < 3*b) {
        x = a;
    } else {
        x = 3*b;
    }

    if (2*a-b < 26) {
        y = 2*a-b;
    } else {
        y = 26;
    }

    // находим минимальное значение z
    int z;
    if (x < y) {
        z = x;
    } else {
        z = y;
    }

    // выводим результат
    cout << "z = " << z << endl;

    return 0;
}

2)
#include <iostream>
using namespace std;

int my_min(int x, int y) {
    return (x < y) ? x : y;
}

int main()
{
    int a, b, x, y;

    // вводим значения a и b
    cout << "Enter a: ";
    cin >> a;
    cout << "Enter b: ";
    cin >> b;

    // вычисляем x и y, минимальные значения из a и 3b-2a-b
    x = my_min(a, 3*b);
    y = my_min(2*a-b, 26);

    // находим минимальное значение z с помощью функции my_min
    int z = my_min(x, y);

    // выводим результат
    cout << "z = " << z << endl;

    return 0;
}

#include <iostream>
using namespace std;

int main() {
    int arr[3][3];
    int x = 1;
    int mid = 3/2; 
    
    for(int i=0;i<=mid;i++) {
        for(int j=i;j<3-i;j++) {
            arr[i][j]=x++; 
        } 
        for(int j=i+1;j<3-i;j++) {
            arr[j][3-i-1]=x++; 
        } 
        for(int j=3-i-2;j>=i;j--) {
            arr[3-i-1][j]=x++; 
        } 
        for(int j=3-i-2;j>i;j--) {
            arr[j][i]=x++;  
        } 
    }

    for(int i=0;i<3;i++) {
        for(int j=0;j<3;j++) {
            cout<<arr[i][j]<<" ";
        }
        cout<<"\n";
    }
    
    return 0;
}



4.10)

#include <iostream>
#include <cmath>

using namespace std;

int main() {
    int N, M, B;
    cout << "Введите количество строк матрицы: ";
    cin >> N;
    cout << "Введите количество столбцов матрицы: ";
    cin >> M;
    cout << "Введите число B: ";
    cin >> B;

    int A[N][M];
    int C[N * M]; 
    int count = 0; 

    for(int i = 0; i < N; i++) {
        for(int j = 0; j < M; j++) {
            cout << "Введите элемент A[" << i << "][" << j << "]: ";
            cin >> A[i][j];
            if(abs(A[i][j]) > B) {
                C[count++] = A[i][j];
            }
        }
    }

    cout << "Количество элементов, превышающих по абсолютной величине число B: " << count << endl;
    cout << "Элементы, превышающие по абсолютной величине число B: ";
    for(int i = 0; i < count; i++) {
        cout << C[i] << " ";
    }

    return 0;
}



4.15)

#include <iostream>

using namespace std;

int main() {
    int B[5][5] = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}, {16, 17, 18, 19, 20}, {21, 22, 23, 24, 25}};
    int sum = 0;
    for(int i = 0; i < 5; i++) {
        for(int j = i+1; j < 5; j++) {
            sum += B[i][j];
        }
    }
    cout << "Сумма элементов выше левой диагонали массива B составляет " << sum << endl;
    return 0;

4.16)

#include <iostream>

using namespace std;

const int SIZE = 5;

int main() {
    int matrix[SIZE][SIZE] = {{1, -2, 3, -4, 5},
                              {6, 7, 8, 9, 10},
                              {11, 12, 13, 14, 15},
                              {16, 17, 18, 19, 20},
                              {21, 22, 23, 24, 25}};

    cout << "Original matrix:" << endl;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    for (int j = 0; j < SIZE; j++) {
        if (matrix[0][j] < 0) {
            matrix[0][j] = 0;
        }
    }

    cout << "Modified matrix:" << endl;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


4.17)

#include <iostream>
#include <cstdlib>
#include <cmath>

using namespace std;

int main()
{
    int a[5][5];
    int maxElement = 0;

    for(int i = 0; i < 5; i++) {
        for(int j = 0; j < 5; j++) {
            a[i][j] = rand() % 20 - 10; 
            cout << a[i][j] << "\t";
            if(abs(a[i][j]) > maxElement) {
                maxElement = abs(a[i][j]);
            }
        }
        cout << endl;
    }

    cout << endl << "Max element: " << maxElement << endl << endl;

    for(int i = 0; i < 5; i++) {
        for(int j = 0; j < 5; j++) {
            a[i][j] = round(a[i][j] / (double)maxElement * 100) / 100.0; 
            cout << a[i][j] << "\t";
        }
        cout << endl;
    }

    return 0;
}


4.18)


#include <iostream>
using namespace std;

int main()
{
    const int M = 5;
    const int N = 4;
    int a[M][N] = {{3, 1, 4, 6}, {7, 2, 5, 8}, {9, 10, 12, 11}, {13, 16, 15, 14}, {18, 17, 20, 19}};

    for (int j = 0; j < N; j++)
    {
        if (j % 2 == 0) 
        {
            for (int i = 0; i < M - 1; i++)
            {
                for (int k = i + 1; k < M; k++)
                {
                    if (a[i][j] > a[k][j])
                    {
                        int temp = a[i][j];
                        a[i][j] = a[k][j];
                        a[k][j] = temp;
                    }
                }
            }
        }
        else 
        {
            for (int i = 0; i < M - 1; i++)
            {
                for (int k = i + 1; k < M; k++)
                {
                    if (a[i][j] < a[k][j])
                    {
                        int temp = a[i][j];
                        a[i][j] = a[k][j];
                        a[k][j] = temp;
                    }
                }
            }
        }
    }
    
    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cout << a[i][j] << "\t";
        }
        cout << endl;
    }

    return 0;
}



4.19)

#include <iostream>

int main() {
    const int rows = 8;
    const int cols = 5;
    int matrix[rows][cols] = {
        {4, 2, 8, 4, 5},
        {6, 7, 8, 9, 10},
        {1, 2, 32, 24, 5},
        {6, 17, 1, 19, 20},
        {21, 22, 3, 24, 2},
        {26, 7, 18, 9, 30},
        {1, 32, 33, 34, 35},
        {0, 32, 8, 9, 20}
    };

    int sum_col_2 = 0;
    for (int i = 0; i < rows; i++) {
        sum_col_2 += matrix[i][1]; 
    }
    std::cout << "Сумма всех элементов второго столбца массива: " << sum_col_2 << std::endl;

    int sum_row_3 = 0;
    for (int j = 0; j < cols; j++) {
        sum_row_3 += matrix[2][j]; 
    }
    std::cout << "Сумма всех элементов третьей строки массива: " << sum_row_3 << std::endl;

    return 0;
}



4.20)



#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main() {
    srand(time(NULL)); 

    const int M = 5; 
    const int N = 6; 

    int matrix[M][N]; 
    int array[M*N]; 
    int counter = 0; 

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            matrix[i][j] = rand() % 100 + 1;
        }
    }

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            if (matrix[i][j] >= 1 && matrix[i][j] <= 20) {
                array[counter] = matrix[i][j];
                counter++;
            }
        }
    }

    cout << "Matrix:" << endl;
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    cout << "Array:" << endl;
    for (int i = 0; i < counter; i++) {
        cout << array[i] << " ";
    }
    cout << endl;

    double sum = 0;
    for (int i = 0; i < counter; i++) {
        sum += array[i];
    }
    double average = sum / counter;

    cout << "Average: " << average << endl;

    return 0;
}



4.21)


#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main() {
    srand(time(NULL)); 

    const int M = 5; 
    const int N = 6; 
    int matrix[M][N]; 
    int array[M*N]; 
    int counter = 0; 

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            matrix[i][j] = rand() % 100 + 1;
        }
    }

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            if (matrix[i][j] >= 1 && matrix[i][j] <= 10) {
                array[counter] = matrix[i][j];
                counter++;
            }
        }
    }

    cout << "Matrix:" << endl;
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    cout << "Array:" << endl;
    for (int i = 0; i < counter; i++) {
        cout << array[i] << " ";
    }
    cout << endl;

    int product = 1;
    for (int i = 0; i < counter; i++) {
        product *= array[i];
    }

    cout << "Product: " << product << endl;

    return 0;
}


4.22)


#include <iostream>

using namespace std;

int main() {
    const int N = 5; 

    int matrix[N][N]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    for (int i = 0; i < N; i++) {
        int max_element = matrix[i][0]; 
        int max_index = 0; 
        for (int j = 1; j < N; j++) {
            if (matrix[i][j] > max_element) {
                max_element = matrix[i][j];
                max_index = j;
            }
        }

        int temp = matrix[i][i];
        matrix[i][i] = max_element;
        matrix[i][max_index] = temp;
    }

    cout << "Modified matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


4.23)
#include <iostream>

using namespace std;

int main() {
    const int N = 3; 
    int matrix[N][N]; 


    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    int min_count = N + 1; 
    int min_column = -1; 
    for (int j = 0; j < N; j++) {
        int count = 0; 
        for (int i = 0; i < N; i++) {
            if (matrix[i][j] % (i + j) == 0) {
                count++;
            }
        }

        if (count < min_count) {
            min_count = count;
            min_column = j;
        }
    }

    if (min_column == -1) {
        cout << "There is no column with elements that are multiples of the sum of indices." << endl;
    } else {
        cout << "Column with the smallest number of elements that are multiples of the sum of indices: " << min_column + 1 << endl;
    }

    return 0;
}


4.24)

#include <iostream>

using namespace std;

int main() {
    const int N = 3;
    int matrix[N][N]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    int sum = 0; 

    for (int i = 0; i < N; i++) {
        for (int j = i + 1; j < N; j++) {
            sum += matrix[i][j];
        }
    }

    cout << "Sum of elements above the main diagonal: " << sum << endl;

    return 0;
}

4.25)

#include <iostream>

using namespace std;

int main() {
    const int N = 3; 

    int matrix[N][N]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    bool is_symmetric = true; 

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < i; j++) {
            if (matrix[i][j] != matrix[j][i]) {
                is_symmetric = false;
                break;
            }
        }
        if (!is_symmetric) {
            break;
        }
    }

    if (is_symmetric) {
        cout << "The matrix is symmetric with respect to its main diagonal" << endl;
    } else {
        cout << "The matrix is not symmetric with respect to its main diagonal" << endl;
    }

    return 0;
}

4.26)


#include <iostream>

using namespace std;

int main() {
    const int N = 3; 

    int matrix[N][N]; 
    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    bool is_symmetric = true; 
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < i; j++) {
            if (matrix[i][j] != matrix[j][i]) {
                is_symmetric = false;
                break;
            }
        }
        if (!is_symmetric) {
            break;
        }
    }

    if (is_symmetric) {
        cout << "The matrix is symmetric with respect to its main diagonal" << endl;
    } else {
        cout << "The matrix is not symmetric with respect to its main diagonal" << endl;
    }

    return 0;
}


4.27)

#include <iostream>

int main() {
int a[3][3], n, m; 
std::cin >> n >> m;
for (int i = 0; i < n * m; i++)
a[i / m][i % m] = (i / m) * (i % m);

for (int i = 0; i < n; i++) {
for (int j = 0; j < m; j++)
std::cout << a[i][j] << ' ';
std::cout << '\n';
}

return 0;
}


4.28)

#include <iostream>

using namespace std;

int main() {
    const int N = 5; 
    const int M = 4; 

    int matrix[N][M]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> matrix[i][j];
        }
    }

    int minCount = M; 
    int minIndex = -1; 

    for (int i = 0; i < N; i++) {
        int count = 1; 
        for (int j = 1; j < M; j++) {
            if (matrix[i][j] == matrix[i][j-1]) {
                count++;
            } else {
                count = 1;
            }
        }
        if (count < minCount) {
            minCount = count;
            minIndex = i;
        }
    }

    if (minIndex == -1) {
        cout << "All rows have the same number of elements" << endl;
    } else {
        cout << "Row " << minIndex << " has the minimum number of identical elements: " << minCount << endl;
    }

    return 0;
}

4.29)

#include <iostream>

using namespace std;

int main() {
    const int N = 5; 

    int matrix[N][N]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    int product = 1; 
    for (int i = 1; i < N; i++) {
        for (int j = 0; j < i; j++) {
            product *= matrix[i][j];
        }
    }

    cout << "The product of elements below the main diagonal is " << product << endl;

    return 0;
}

4.30)


#include <iostream>

using namespace std;

int main() {
    const int N = 4; 
    const int M = 4; 

    int matrix[N][M]; 


    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> matrix[i][j];
        }
    }

    int max_count = 0; 
    int max_row = -1; 

    for (int i = 0; i < N; i++) {
        int count = 1; 
        for (int j = 0; j < M - 1; j++) {
            if (matrix[i][j] == matrix[i][j+1]) {
                count++;
            } else {
                if (count > max_count) {
                    max_count = count;
                    max_row = i;
                }
                count = 1;
            }
        }
        if (count > max_count) {
            max_count = count;
            max_row = i;
        }
    }

    // вывод результата
    if (max_row != -1) {
        cout << "The row with the maximum number of identical elements is " << max_row + 1 << endl;
    } else {
        cout << "There are no identical elements in the matrix" << endl;
    }

    return 0;
}



//самостоятельная базовая 1, №B16:
#include <iostream>
#include <cmath>

using namespace std;

int main() {
    double x1, x2, distance;
    
    cout << "Введите координату первой точки (x1): ";
    cin >> x1;
    
    cout << "Введите координату второй точки (x2): ";
    cin >> x2;
    
    distance = abs(x2 - x1);
    
    cout << "Расстояние между двумя точками: " << distance << endl;
    
    return 0;
}

//самостоятельная базовая 1, №IN29:
#include <iostream>

using namespace std;

int main() {
    int a, b, c;
    int squares, area;
    
    cout << "Введите размеры прямоугольника A, B: ";
    cin >> a >> b;
    
    cout << "Введите размер стороны квадрата C: ";
    cin >> c;
    
    squares = (a / c) * (b / c);
    
    cout << "Количество квадратов на прямоугольнике: " << squares << endl;
    
    area = a * b - squares * c * c;
    
    cout << "Площадь незанятой части прямоугольника: " << area << endl;
    
    return 0;
}

//самостоятельная базовая 3, №5.88:
#include <iostream>

using namespace std;

int main() {
    int n;
    int result = 0;
    int start, end = 0;
    
    cout << "Введите натуральное число для возведения в третью степень: ";
    cin >> n;
    
    // Цикл построения третьей степени числа с учетом закономерности
    for (int i = 1; i <= n; i++) {
        start = end + 1;
        end = start + 2 * i - 2;
        
        for (int j = start; j <= end; j += 2) {
            result += j;
        }
    }
    
    cout << "Результат возведения в третью степень: " << result << endl;
    
    return 0;
}

//самостоятельная базовая 3, №5.89:
#include <iostream>

using namespace std;

int main()
{
    int n;
    cout << "Enter n: ";
    cin >> n;

    int sum = 0;
    int prod = 1;
    int factorial = 1;

    for (int k = 1; k <= n; k++)
    {
        factorial *= k;   // Вычисляем факториал за O(n) шагов
        sum += factorial; // Добавляем факториал к сумме
        prod *= factorial;// Умножаем факториал на произведение
    }

    cout << "Sum = " << sum << endl;
    cout << "Prod = " << prod << endl;

    return 0;
}
 
//самостоятельная базовая 3, №5.90:
#include <iostream>
#include <cmath>

using namespace std;

int main()
{
    int n;
    double sum = 1.0;

    cout << "Enter n: ";
    cin >> n;

    int fact = 1;
    for (int i = 1; i <= n; i++)
    {
        fact *= i;
        double term = 1.0 / fact;
        sum += term;
    }

    cout << "Sum = " << sum << endl;

    return 0;
}

//самостоятельная базовая 3, №5.91:
#include <iostream>
#include <cmath>

using namespace std;

int main()
{
    int n;
    double x, sum = 0.0;

    cout << "Enter x: ";
    cin >> x;
    cout << "Enter n: ";
    cin >> n;

    int fact = 1;
    for (int i = 0; i <= n; i++)
    {
        double term = pow(x, i) / fact;
        sum += term;
        fact *= (i+1);
    }

    cout << "Sum = " << sum << endl;

    return 0;
}
//самостоятельная базовая 3, №5.92:
#include <iostream>
#include <cmath>

using namespace std;

int main()
{
    double sum = 0.0;

    for (int i = 1; i <= 50; i++) 
    {
        sum += sqrt(i);
    }

    cout << "Sum = " << sum << endl;

    return 0;
}

//самостоятельная базовая 3, №5.93(a):
#include <iostream>
#include <cmath>

using namespace std;

int main()
{
    int n;
    double sum = 0.0;
    double sin_sum = 0.0;

    cout << "Enter the value of n: ";
    cin >> n;

    for (int i = 1; i <= n; i++)
    {
        sin_sum += sin(i); // вычисляем сумму синусов
        sum += 1.0 / sin_sum;
    }

    cout << "Sum = " << sum << endl;

    return 0;
}


//самостоятельная базовая 3, №5.93(б):
#include <iostream>
#include <cmath>

using namespace std;

int main()
{
    int n;
    double sum;

    cout << "Enter the value of n: ";
    cin >> n;

    sum = n * sqrt(2.0); // вычисляем сумму по формуле

    cout << "Sum = " << sum << endl;

    return 0;
}


//самостоятельная базовая 3, №5.93(в):
#include <iostream>
#include <cmath>

using namespace std;

int main()
{
    int n;
    double sum = 0.0;
    double cos_sum = 0.0, sin_sum = 0.0;

    cout << "Enter the value of n: ";
    cin >> n;

    for (int i = 1; i <= n; i++)
    {
        cos_sum += cos(i); // вычисляем сумму cos
        sin_sum += sin(i); // вычисляем сумму sin
        sum += cos_sum / sin_sum; // добавляем текущее значение к общей сумме
    }

    cout << "Sum = " << sum << endl;

    return 0;
}

//самостоятельная базовая 3, №W7:
#include <iostream>

using namespace std;

int main() {
  int n;
  cout << "Введите целое число N: ";
  cin >> n;

  int k = 1;
  while (k * k <= n) {
    k++;
  }

  cout << "Наименьшее целое положительное число K, квадрат которого превосходит N: " << k << endl;

  return 0;
}

//самостоятельная прод 3, №17:

//самостоятельная базовая 4, №3.7:
#include <iostream>

using namespace std;

int main() {
  int A[3][4];

  // заполнение матрицы А значениями
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 4; j++) {
      cout << "Введите элемент А[" << i << "][" << j << "]: ";
      cin >> A[i][j];
    }
  }

  // поиск наименьшего элемента в первой строке
  int min_element_1st_row = A[0][0];
  int min_column_1st_row = 0;
  for (int j = 1; j < 4; j++) {
    if (A[0][j] < min_element_1st_row) {
      min_element_1st_row = A[0][j];
      min_column_1st_row = j;
    }
  }

  // поиск наименьшего элемента в третьей строке
  int min_element_3rd_row = A[2][0];
  int min_column_3rd_row = 0;
  for (int j = 1; j < 4; j++) {
    if (A[2][j] < min_element_3rd_row) {
      min_element_3rd_row = A[2][j];
      min_column_3rd_row = j;
    }
  }

  // меняем местами наименьшие элементы
  int temp = A[0][min_column_1st_row];
  A[0][min_column_1st_row] = A[2][min_column_3rd_row];
  A[2][min_column_3rd_row] = temp;

  // вывод матрицы А после замены
  cout << "Матрица А после замены наименьших элементов:" << endl;
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 4; j++) {
      cout << A[i][j] << " ";
    }
    cout << endl;
  }

  return 0;
}

//самостоятельная базовая 4, №3.8:
#include <iostream>

using namespace std;

int main() {
  int N;
  cout << "Введите размер матрицы: ";
  cin >> N;
  float A[N][N];

  // заполнение матрицы А значениями
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      cout << "Введите элемент А[" << i << "][" << j << "]: ";
      cin >> A[i][j];
    }
  }

  // находим наименьшие элементы каждого столбца и вычисляем произведение
  float min_elements[N];
  for (int j = 0; j < N; j++) {
    float min_element = A[0][j];
    for (int i = 1; i < N; i++) {
      if (A[i][j] < min_element) {
        min_element = A[i][j];
      }
    }
    min_elements[j] = min_element;
  }

  float product = 1;
  for (int j = 0; j < N; j++) {
    product *= min_elements[j];
  }

  cout << "Произведение наименьших элементов каждого столбца матрицы A: " << product << endl;

  return 0;
}


//самостоятельная базовая 4, №3.9:

#include <iostream>
using namespace std;

int main() {
    int arr[5][6] = {{1, 2, 3, 4, 5, 6},
                     {7, 8, 9, 10, 11, 12},
                     {13, 14, 15, 16, 17, 18},
                     {19, 20, 21, 22, 23, 24},
                     {25, 26, 27, 28, 29, 30}};
    int sum[6] = {0};
    int max[5] = {0};
    int min[5] = {0};

    // Среднее арифметическое каждого столбца
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 5; j++) {
            sum[i] += arr[j][i];
        }
        cout << "Среднее арифметическое столбца " << i+1 << ": " << sum[i]/5.0 << endl;
    }

    // Максимум и минимум каждой строки
    for (int i = 0; i < 5; i++) {
        max[i] = arr[i][0];
        min[i] = arr[i][0];
        for (int j = 1; j < 6; j++) {
            if (arr[i][j] > max[i]) {
                max[i] = arr[i][j];
            }
            if (arr[i][j] < min[i]) {
                min[i] = arr[i][j];
            }
        }
        cout << "Максимум строки " << i+1 << ": " << max[i] << endl;
        cout << "Минимум строки " << i+1 << ": " << min[i] << endl;
    }

    return 0;
}


//самостоятельная базовая 4, №3.10:
#include <iostream>
using namespace std;

int main() {
    int arr[7][8] = {{1, 2, 3, 4, 5, 6, 7, 8},
                     {9, 10, 11, 12, 13, 14, 15, 16},
                     {17, 18, 19, 20, 21, 22, 23, 24},
                     {25, 26, 27, 28, 29, 30, 31, 32},
                     {33, 34, 35, 36, 37, 38, 39, 40},
                     {41, 42, 43, 44, 45, 46, 47, 48},
                     {49, 50, 51, 52, 53, 54, 55, 56}};

    int oddCount[8] = {0}; // массив для хранения количества нечетных элементов в каждом столбце

    for (int j = 0; j < 8; j++) { // перебираем столбцы
        for (int i = 0; i < 7; i++) { // перебираем строки
            if (arr[i][j] % 2 != 0) { // если элемент нечетный
                oddCount[j]++; // увеличиваем счетчик нечетных элементов в текущем столбце
            }
        }
    }

    // выводим результаты
    for (int j = 0; j < 8; j++) {
        cout << "В столбце " << j+1 << " количество нечетных элементов: " << oddCount[j] << endl;
    }

    return 0;
}

//самостоятельная прод 4, №17:
#include <iostream>
#include <cmath>
using namespace std;

double f(double x, double* a, int n) {
    double result = 0;
    for (int i = 0; i < n; i++) {
        result += a[i] * pow(x, i+1);
    }
    return result;
}

double df(double x, double* a, int n) {
    double result = 0;
    for (int i = 0; i < n-1; i++) {
        result += (i+1) * a[i] * pow(x, i);
    }
    return result;
}

int main() {
    int n;
    cout << "Введите степень полинома: ";
    cin >> n;
    double a[n];
    cout << "Введите коэффициенты полинома: ";
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    double x0;
    cout << "Введите начальную точку: ";
    cin >> x0;
    double eps;
    cout << "Введите точность: ";
    cin >> eps;
    double x = x0;
    double delta;
    do {
        delta = f(x, a, n) / df(x, a, n);
        x -= delta;
    } while (abs(delta) > eps);
    cout << "Корень уравнения: " << x << endl;
    return 0;
}


//самостоятельная базовая 5 №16:
#include <iostream>
#include <cmath>
using namespace std;

double f(double x, double* a, int n) {
    double result = 0;
    for (int k = 0; k <= n; k++) {
        result += a[k] * pow(x, k);
    }
    return result;
}

double f_prime(double x, double* a, int n) {
    double result = 0;
    for (int k = 1; k <= n; k++) {
        result += k * a[k] * pow(x, k-1);
    }
    return result;
}

double newton_method(double* a, int n, double x0, double eps) {
    double x = x0;
    double delta = f(x, a, n) / f_prime(x, a, n);
    while (abs(delta) > eps) {
        x -= delta;
        delta = f(x, a, n) / f_prime(x, a, n);
    }
    return x;
}

int main() {
    int n;
    cout << "Enter the degree of the polynomial: ";
    cin >> n;
    double* a = new double[n+1];
    cout << "Enter the coefficients of the polynomial: ";
    for (int k = 0; k <= n; k++) {
        cin >> a[k];
    }
    double x0, eps;
    cout << "Enter the initial guess: ";
    cin >> x0;
    cout << "Enter the desired accuracy: ";
    cin >> eps;
    double root = newton_method(a, n, x0, eps);
    cout << "The root of the polynomial is: " << root << endl;
    delete[] a;
    return 0;
}

//самостоятельная базовая 1, №Begin 19
#include <iostream>
#include <cmath>

double calculatePerimeter(double x1, double y1, double x2, double y2) {
    double length = std::abs(x2 - x1);
    double width = std::abs(y2 - y1);
    
    return 2 * (length + width);
}

double calculateArea(double x1, double y1, double x2, double y2) {
    double length = std::abs(x2 - x1);
    double width = std::abs(y2 - y1);
    
    return length * width;
}

int main() {
    double x1, y1, x2, y2;
    std::cout << "Введите координаты двух противоположных вершин прямоугольника:" << std::endl;
    std::cout << "x1: ";
    std::cin >> x1;
    std::cout << "y1: ";
    std::cin >> y1;
    std::cout << "x2: ";
    std::cin >> x2;
    std::cout << "y2: ";
    std::cin >> y2;
    
    double perimeter = calculatePerimeter(x1, y1, x2, y2);
    double area = calculateArea(x1, y1, x2, y2);
    
    std::cout << "Периметр прямоугольника: " << perimeter << std::endl;
    std::cout << "Площадь прямоугольника: " << area << std::endl;
    
    return 0;
}


//самостоятельная базовая 1, №Integer 30

#include <iostream>

int calculateCentury(int year) {
    int century = (year - 1) / 100 + 1;
    return century;
}

int main() {
    int year;
    std::cout << "Введите номер года: ";
    std::cin >> year;
    
    int century = calculateCentury(year);
    
    std::cout << "Номер столетия: " << century << std::endl;
    
    return 0;
}


//самостоятельная продвинутый 1, №3
#include <iostream>
#include <cmath>

const double g = 9.8; // Ускорение свободного падения (м/с^2)

void calculateInitialVelocityAndAngle(double H, double L, double& V, double& alpha) {
    double alphaRad = atan(4 * H / L); // Угол альфа в радианах
    
    alpha = alphaRad * 180 / M_PI; // Угол альфа в градусах
    
    V = sqrt(g * L / sin(2 * alphaRad));
}

int main() {
    double H, L;
    std::cout << "Введите максимальную высоту подъема (H): ";
    std::cin >> H;
    std::cout << "Введите дальность полета (L): ";
    std::cin >> L;
    
    double V, alpha;
    calculateInitialVelocityAndAngle(H, L, V, alpha);
    
    std::cout << "Начальная скорость (V): " << V << " м/с" << std::endl;
    std::cout << "Угол альфа: " << alpha << " градусов" << std::endl;
    
    return 0;
}







//самостоятельная базовая 3, №5.93(г)
#include <iostream>
#include <cmath>

double nestedSquareRoot(int n) {
    double result = std::sqrt(3 * n);
    
    for (int i = n - 1; i >= 1; i--) {
        result = std::sqrt(3 * i + result);
    }
    
    return result;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    double answer = nestedSquareRoot(n);
    
    std::cout << "Ответ: " << answer << std::endl;
    
    return 0;
}



//самостоятельная базовая 3, №6.8

#include <iostream>
#include <cmath>

void printNumbers(int n) {
    int i = 1;
    int square = 1;
    
    while (square <= n) {
        std::cout << square << " ";
        i++;
        square = i * i;
    }
    
    std::cout << std::endl;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    std::cout << "Числа, не превышающие " << n << ": ";
    printNumbers(n);
    
    return 0;
}


//самостоятельная базовая 3, №6.9
#include <iostream>
#include <cmath>

int findFirstNumberGreaterThanN(int n) {
    int i = 1;
    int square = 1;
    
    while (square <= n) {
        i++;
        square = i * i;
    }
    
    return square;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    int firstNumber = findFirstNumberGreaterThanN(n);
    
    std::cout << "Первое число больше " << n << ": " << firstNumber << std::endl;
    
    return 0;
}


//самостоятельная базовая 3, №6.10(а)

#include <iostream>
#include <cmath>

void printSquares(int n) {
    int number = 1;
    
    while (number * number <= n) {
        std::cout << number * number << " ";
        number++;
    }
    
    std::cout << std::endl;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    std::cout << "Квадраты чисел, не превышающие " << n << ": ";
    printSquares(n);
    
    return 0;
}



//самостоятельная базовая 3, №6.10(б)

#include <iostream>
#include <cmath>

int findFirstSquareGreaterThanN(int n) {
    int number = 1;
    
    while (number * number <= n) {
        number++;
    }
    
    return number;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    int firstNumber = findFirstSquareGreaterThanN(n);
    
    std::cout << "Первое натуральное число, квадрат которого больше " << n << ": " << firstNumber << std::endl;
    
    return 0;
}




//самостоятельная базовая 3, №6.11

#include <iostream>

void printNumbers(double a) {
    double number = 1.0;
    double increment = 2.0;
    
    while (number < a) {
        std::cout << number << " ";
        number += 1.0 / increment;
        increment++;
    }
    
    std::cout << std::endl;
}

int main() {
    double a;
    std::cout << "Введите значение a: ";
    std::cin >> a;
    
    std::cout << "Числа, не меньшие " << a << ": ";
    printNumbers(a);
    
    return 0;
}



//самостоятельная базовая 3, №6.12

#include <iostream>

double findFirstNumberLessThanA(double a) {
    double number = 1.0;
    double increment = 2.0;
    
    while (number >= a) {
        number += 1.0 / increment;
        increment++;
    }
    
    return number;
}

int main() {
    double a;
    std::cout << "Введите значение a: ";
    std::cin >> a;
    
    double firstNumber = findFirstNumberLessThanA(a);
    
    std::cout << "Первое число меньше " << a << ": " << firstNumber << std::endl;
    
    return 0;
}



//самостоятельная базовая 3, № w6

#include <iostream>

double doubleFactorial(int N) {
    double result = 1.0;
    
    if (N % 2 == 0) {
        for (int i = N; i >= 2; i -= 2) {
            result *= i;
        }
    } else {
        for (int i = N; i >= 1; i -= 2) {
            result *= i;
        }
    }
    
    return result;
}

int main() {
    int N;
    std::cout << "Введите значение N: ";
    std::cin >> N;
    
    double doubleFact = doubleFactorial(N);
    
    std::cout << "Двойной факториал числа " << N << ": " << doubleFact << std::endl;
    
    return 0;
}



//самостоятельная базовый 4, №3.11
#include <iostream>

void countEvenOddNumbers(int arr[][m], int n, int m, int& evenCount, int& oddCount) {
    evenCount = 0;
    oddCount = 0;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (arr[i][j] % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
    }
}

int main() {
    int n, m;
    std::cout << "Введите количество строк: ";
    std::cin >> n;
    std::cout << "Введите количество столбцов: ";
    std::cin >> m;
    
    int arr[n][m];
    
    std::cout << "Введите элементы массива:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> arr[i][j];
        }
    }
    
    int evenCount, oddCount;
    countEvenOddNumbers(arr, n, m, evenCount, oddCount);
    
    std::cout << "Количество четных чисел: " << evenCount << std::endl;
    std::cout << "Количество нечетных чисел: " << oddCount << std::endl;
    
    return 0;
}



//самостоятельная базовый 4, №3.12
#include <iostream>

int countOccurrences(int arr[][m], int n, int m) {
    int count = 0;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (arr[i][j] == 7) {
                count++;
            }
        }
    }
    
    return count;
}

int main() {
    int n, m;
    std::cout << "Введите количество строк: ";
    std::cin >> n;
    std::cout << "Введите количество столбцов: ";
    std::cin >> m;
    
    int arr[n][m];
    
    std::cout << "Введите элементы массива:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> arr[i][j];
        }
    }
    
    int occurrences = countOccurrences(arr, n, m);
    
    std::cout << "Число 7 встречается " << occurrences << " раз(а)" << std::endl;
    
    return 0;
}




//самостоятельная базовый 4, №3.13
#include <iostream>

void findMaxInColumns(int arr[][m], int n, int m) {
    for (int j = 0; j < m; j++) {
        int maxElement = arr[0][j];
        
        for (int i = 1; i < n; i++) {
            if (arr[i][j] > maxElement) {
                maxElement = arr[i][j];
            }
        }
        
        std::cout << "Наибольший элемент в столбце " << j+1 << ": " << maxElement << std::endl;
    }
}

int main() {
    int n, m;
    std::cout << "Введите количество строк: ";
    std::cin >> n;
    std::cout << "Введите количество столбцов: ";
    std::cin >> m;
    
    int arr[n][m];
    
    std::cout << "Введите элементы массива:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> arr[i][j];
        }
    }
    
    findMaxInColumns(arr, n, m);
    
    return 0;
}


//самостоятельная базовый 4, №3.14
#include <iostream>
#include <limits>

void findMinIndex(int arr[][m], int n, int m, int& rowIndex, int& colIndex) {
    int minElement = std::numeric_limits<int>::max();
    rowIndex = -1;
    colIndex = -1;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (arr[i][j] < minElement) {
                minElement = arr[i][j];
                rowIndex = i;
                colIndex = j;
            }
        }
    }
}

int main() {
    int n, m;
    std::cout << "Введите количество строк: ";
    std::cin >> n;
    std::cout << "Введите количество столбцов: ";
    std::cin >> m;
    
    int arr[n][m];
    
    std::cout << "Введите элементы массива:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> arr[i][j];
        }
    }
    
    int rowIndex, colIndex;
    findMinIndex(arr, n, m, rowIndex, colIndex);
    
    if (rowIndex != -1 && colIndex != -1) {
        std::cout << "Индексы первого наименьшего элемента: (" << rowIndex << ", " << colIndex << ")" << std::endl;
    } else {
        std::cout << "Массив пуст или некорректный размер" << std::endl;
    }
    
    return 0;
}



//самостоятельная продвинутый 4, №18
// данной программе функция evaluateFunction вычисляет значение функции f(x) для заданного x и 
//коэффициентов a[k]. Функция evaluateDerivative вычисляет значение производной функции f(x) для 
//заданного x и коэффициентов a[k]. Функция solveEquationNewton решает уравнение методом Ньютона, 
//используя начальное приближение initialGuess и требуемую точность tolerance. В функции main считываются 
//степень уравнения, коэффициенты, начальное приближение и требуемая точность с помощью стандартного ввода. 
//Затем вызывается функция solveEquationNewton и решение уравнения выводится на экран

#include <iostream>
#include <cmath>

double evaluateFunction(double x, double* coefficients, int degree) {
    double sum = 0.0;
    
    for (int k = 0; k <= degree; k++) {
        sum += coefficients[k] * pow(x, k);
    }
    
    return sum;
}

double evaluateDerivative(double x, double* coefficients, int degree) {
    double sum = 0.0;
    
    for (int k = 1; k <= degree; k++) {
        sum += k * coefficients[k] * pow(x, k - 1);
    }
    
    return sum;
}

double solveEquationNewton(double* coefficients, int degree, double initialGuess, double tolerance) {
    double x0 = initialGuess;
    double x1 = x0;
    
    do {
        x0 = x1;
        x1 = x0 - evaluateFunction(x0, coefficients, degree) / evaluateDerivative(x0, coefficients, degree);
    } while (std::abs(x1 - x0) > tolerance);
    
    return x1;
}

int main() {
    int degree;
    std::cout << "Введите степень уравнения: ";
    std::cin >> degree;
    
    double coefficients[degree + 1];
    std::cout << "Введите коэффициенты уравнения:" << std::endl;
    for (int k = 0; k <= degree; k++) {
        std::cout << "a[" << k << "]: ";
        std::cin >> coefficients[k];
    }
    
    double initialGuess;
    std::cout << "Введите начальное приближение: ";
    std::cin >> initialGuess;
    
    double tolerance;
    std::cout << "Введите требуемую точность: ";
    std::cin >> tolerance;
    
    double solution = solveEquationNewton(coefficients, degree, initialGuess, tolerance);
    
    std::cout << "Решение уравнения f(x) = 0: x = " << solution << std::endl;
    
    return 0;
}
41(г,д,е) - Самостоятельная работа 1 (базовый)
г)
//Самостоятельная работа 1 базовая (г)
#include <iostream>

using namespace std;

int main() {
    double a;
    cout << "Введите вещественное число a: ";
    cin >> a;

    // г) a^8 за три операции
    double a2 = a * a;
    double a4 = a2 * a2;
    double a8 = a4 * a4;
    cout << "a^8 = " << a8 << endl;


    return 0;
}

------------------------
д)
//Самостоятельная работа 1 базовая (д)
#include <iostream>

using namespace std;

int main() {
    double a;
    cout << "Введите вещественное число a: ";
    cin >> a;

    // д) a^9 за четыре операции
    double a3 = a * a2;
    double a9 = a3 * a3 * a3;
    cout << "a^9 = " << a9 << endl;

    return 0;
}

----------------
е)

//Самостоятельная работа 1 базовая (е)
#include <iostream>

using namespace std;

int main() {
    double a;
    cout << "Введите вещественное число a: ";
    cin >> a;

    // e) a^10 за четыре операции
    double a5 = a4 * a;
    double a10 = a5 * a5;
    cout << "a^10 = " << a10 << endl;

    return 0;
}

__________________________________________________________


18 - сам раб 1 прод
//Самостоятельная работа 1 задча 18 продвинутая
#include <iostream>
#include <cmath>

double calculateRelativisticKineticEnergy(double mass, double velocity, double speedOfLight) {
    double gamma = 1.0 / std::sqrt(1.0 - (velocity * velocity) / (speedOfLight * speedOfLight));
    double kineticEnergy = mass * speedOfLight * speedOfLight * (gamma - 1.0);
    return kineticEnergy;
}

double calculateNonRelativisticKineticEnergy(double mass, double velocity) {
    double kineticEnergy = (mass * velocity * velocity) / 2.0;
    return kineticEnergy;
}

int main() {
    // Данные для вычислений
    double electronMass = 9.1e-31; // Масса электрона в кг
    double speedOfLight = 2.998e8; // Скорость света в м/с

    // Ввод скорости электрона
    double velocity;
    std::cout << "Введите скорость электрона (в м/с): ";
    std::cin >> velocity;

    // Вычисление кинетической энергии
    double relativisticEnergy = calculateRelativisticKineticEnergy(electronMass, velocity, speedOfLight);
    double nonRelativisticEnergy = calculateNonRelativisticKineticEnergy(electronMass, velocity);

    // Вывод результатов
    std::cout << "Релятивистская кинетическая энергия: " << relativisticEnergy << " Дж" << std::endl;
    std::cout << "Нерелятивистская кинетическая энергия: " << nonRelativisticEnergy << " Дж" << std::endl;

    return 0;
}

__________________________________________________________


5.50
//Самостоятельная работа 3 базовая задача 5.50
#include <iostream>

int main() {
    double a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
    double sum, average;
    
    std::cout << "Enter 10 numbers: ";
    std::cin >> a1 >> a2 >> a3 >> a4 >> a5 >> a6 >> a7 >> a8 >> a9 >> a10;
    
    sum = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10;
    average = sum / 10;
    
    std::cout << "Average: " << average << std::endl;
    
    return 0;
}
------
 5.51
//Самостоятельная работа 3 базовая задача 5.51
#include <iostream>

int main() {
    int n;
    double sum = 0, average;
    
    std::cout << "Enter the count of numbers: ";
    std::cin >> n;
    
    std::cout << "Enter " << n << " numbers: ";
    for (int i = 0; i < n; ++i) {
        double num;
        std::cin >> num;
        sum += num;
    }
    
    average = sum / n;
    
    std::cout << "Average: " << average << std::endl;
    
    return 0;
}
-------------
 5.52
//Самостоятельная работа 3 базовая задача 5.52
#include <iostream>

int main() {
    const int numStudents = 20;
    int marks[numStudents];
    double sum = 0, average;
    
    std::cout << "Enter the marks of " << numStudents << " students: ";
    for (int i = 0; i < numStudents; ++i) {
        std::cin >> marks[i];
        sum += marks[i];
    }
    
    average = sum / numStudents;
    
    std::cout << "Average mark: " << average << std::endl;
    
    return 0;
}
----------------
 5.53
//Самостоятельная работа 3 базовая задача 5.53
#include <iostream>

int main() {
    const int numSubjects = 10;
    int marks[numSubjects];
    double sum = 0, average;
    
    std::cout << "Enter the marks of the student for " << numSubjects << " subjects: ";
    for (int i = 0; i < numSubjects; ++i) {
        std::cin >> marks[i];
        sum += marks[i];
    }
    
    average = sum / numSubjects;
    
    std::cout << "Average mark: " << average << std::endl;
    
    return 0;
}
---------------
 5.54
//Самостоятельная работа 3 базовая задача 5.54
#include <iostream>
#include <vector>

float calculateAverageGrade(const std::vector<float>& grades) {
    float sum = 0.0;
    int count = grades.size();

    for (int i = 0; i < count; i++) {
        sum += grades[i];
    }

    return sum / count;
}

int main() {
    std::vector<float> algebraGrades = { 4.5, 3.2, 4.0, 4.8, 3.9, 4.2 };
    float averageGrade = calculateAverageGrade(algebraGrades);

    std::cout << "Average grade in algebra: " << averageGrade << std::endl;

    return 0;
}
--------------
 5.55
//Самостоятельная работа 3 базовая задача 5.55
#include <iostream>
#include <vector>

float calculateAverageMass(const std::vector<float>& masses) {
    float sum = 0.0;
    int count = masses.size();

    for (int i = 0; i < count; i++) {
        sum += masses[i];
    }

    return sum / count;
}

int main() {
    std::vector<float> itemMasses = { 2.5, 3.8, 4.2, 2.1, 3.5 };
    float averageMass = calculateAverageMass(itemMasses);

    std::cout << "Average mass of items: " << averageMass << std::endl;

    return 0;
}
---------------
 w14 - сам раб 3 баз

//Самостоятельная работа 3 базовая задача while14
#include <iostream>

int main() {
    int K = 1;
    float sum = 0;

    while (sum < 4) {
        sum += 1.0 / K;
        K++;
    }

    std::cout << "Largest integer K: " << K - 1 << std::endl;
    std::cout << "Sum: " << sum << std::endl;

    return 0;
}
_________________________________________________________________

10 - сам раб 3 прод

//Самостоятельная работа 3 продвинутая задача 10
#include <iostream>
#include <cmath>

int main() {
    int upperLimit;
    std::cout << "Enter the upper limit: ";
    std::cin >> upperLimit;

    double product = 1.0;
    for (int n = 1; n <= upperLimit; n++) {
        product *= pow(cos(2 * n + 1), 2);
    }

    std::cout << "Product: " << product << std::endl;

    return 0;
}
____________________________________________________

4 сам раб баз
2.8 

//Самостоятельная работа 4 базовая задача 2.8
#include <iostream>

int main() {
    const int size = 16;
    float arr[size] = {2.5, 1.8, 3.2, 4.7, 2.1, 5.6, 1.3, 6.7, 2.9, 4.5, 3.7, 1.9, 5.2, 3.4, 2.6, 4.1};

    int maxIndex = 0;
    int minIndex = 0;

    for (int i = 1; i < size; i++) {
        if (arr[i] > arr[maxIndex]) {
            maxIndex = i;
        }
        if (arr[i] < arr[minIndex]) {
            minIndex = i;
        }
    }

    std::cout << "Index of the maximum element: " << maxIndex << std::endl;
    std::cout << "Index of the minimum element: " << minIndex << std::endl;

    return 0;
}

2.9

//Самостоятельная работа 4 базовая задача 2.9
#include <iostream>
#include <vector>

std::vector<int> calculateDifference(const std::vector<int>& arr) {
    std::vector<int> result;
    int sum = 0;
    int size = arr.size();

    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }

    int average = sum / size;

    for (int i = 0; i < size; i++) {
        result.push_back(arr[i] - average);
    }

    return result;
}

int main() {
    std::vector<int> arr = {5, 8, 3, 2, 9, 4, 7, 1, 6, 10, 2, 5, 3, 8, 7};
    std::vector<int> diffArray = calculateDifference(arr);

    std::cout << "Difference array: ";
    for (int i = 0; i < diffArray.size(); i++) {
        std::cout << diffArray[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}

 2.10

//Самостоятельная работа 4 базовая задача 2.10
#include <iostream>

int main() {
    const int size = 17;
    int arr[size] = {5, -8, 3, -2, 9, -4, -7, 1, 6, -10, 2, 5, 3, -8, -7, 11, -6};

    int negativeCount = 0;
    int negativeSum = 0;

    for (int i = 0; i < size; i++) {
        if (arr[i] < 0) {
            negativeCount++;
            negativeSum += arr[i];
        }
    }

    double negativeAverage = static_cast<double>(negativeSum) / negativeCount;

    int absoluteSum = 0;
    for (int i = 0; i < size; i++) {
        if (std::abs(arr[i]) > negativeAverage) {
            absoluteSum += arr[i];
        }
    }

    std::cout << "Sum of elements with absolute value greater than the average of negative elements: " << absoluteSum << std::endl;

    return 0;
}

 2.11 

//Самостоятельная работа 4 базовая задача 2.11
#include <iostream>

int main() {
    const int size = 14;
    int arr[size] = {3, -5, 8, -2, 7, -4, 6, 1, -9, 10, 2, -3, 4, -7};

    int positiveEvenCount = 0;
    int positiveEvenSum = 0;

    for (int i = 0; i < size; i++) {
        if (arr[i] > 0 && arr[i] % 2 == 0) {
            positiveEvenCount++;
            positiveEvenSum += arr[i];
        }
    }

    std::cout << "Count of positive even elements: " << positiveEvenCount << std::endl;
    std::cout << "Sum of positive even elements: " << positiveEvenSum << std::endl;

    return 0;
}
_______________________________________
10 - сам раб 4 прод

//Самостоятельная работа 4 продвинутая задача 10
#include <iostream>
#include <vector>
#include <cmath>

double calculateCentralMoment(const std::vector<double>& values, const std::vector<double>& probabilities, double mean, int order) {
    double centralMoment = 0.0;
    int n = values.size();

    for (int i = 0; i < n; i++) {
        centralMoment += std::pow((values[i] - mean), order) * probabilities[i];
    }

    return centralMoment;
}

int main() {
    // Ввод порядка момента
    int order;
    std::cout << "Введите порядок момента: ";
    std::cin >> order;

    // Ввод значений случайной величины и соответствующих вероятностей
    int n;
    std::cout << "Введите количество значений случайной величины: ";
    std::cin >> n;

    std::vector<double> values(n);
    std::vector<double> probabilities(n);

    std::cout << "Введите значения случайной величины и соответствующие вероятности:" << std::endl;
    for (int i = 0; i < n; i++) {
        std::cin >> values[i] >> probabilities[i];
    }

    // Вычисление математического ожидания
    double mean = 0.0;
    for (int i = 0; i < n; i++) {
        mean += values[i] * probabilities[i];
    }

    // Вычисление центрального момента
    double centralMoment = calculateCentralMoment(values, probabilities, mean, order);

    // Вывод результата
    std::cout << "Центральный момент порядка " << order << ": " << centralMoment << std::endl;

    return 0;
}


_______________________________________
9 - сам раб 5 прод

//Самостоятельная работа продвинутая задача 9
#include <iostream>

double calculateDotProduct(const double* vector1, const double* vector2, int size) {
    double dotProduct = 0.0;

    for (int i = 0; i < size; i++) {
        dotProduct += vector1[i] * vector2[i];
    }

    return dotProduct;
}

int main() {
    // Пример использования функции calculateDotProduct

    // Вектор 1: [1, 2, 3]
    double vector1[] = {1.0, 2.0, 3.0};
    int size1 = sizeof(vector1) / sizeof(vector1[0]);

    // Вектор 2: [4, 5, 6]
    double vector2[] = {4.0, 5.0, 6.0};
    int size2 = sizeof(vector2) / sizeof(vector2[0]);

    // Вычисление скалярного произведения
    double dotProduct = calculateDotProduct(vector1, vector2, std::min(size1, size2));

    // Вывод результата
    std::cout << "Скалярное произведение: " << dotProduct << std::endl;

    return 0;
}
