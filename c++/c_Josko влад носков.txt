сам раб 4 баз





4.5)


#include <iostream>
using namespace std;

int main() {
    int arr[3][3];
    int x = 1;
    int mid = 3/2; 
    
    for(int i=0;i<=mid;i++) {
        for(int j=i;j<3-i;j++) {
            arr[i][j]=x++; 
        } 
        for(int j=i+1;j<3-i;j++) {
            arr[j][3-i-1]=x++; 
        } 
        for(int j=3-i-2;j>=i;j--) {
            arr[3-i-1][j]=x++; 
        } 
        for(int j=3-i-2;j>i;j--) {
            arr[j][i]=x++;  
        } 
    }

    for(int i=0;i<3;i++) {
        for(int j=0;j<3;j++) {
            cout<<arr[i][j]<<" ";
        }
        cout<<"\n";
    }
    
    return 0;
}



4.10)

#include <iostream>
#include <cmath>

using namespace std;

int main() {
    int N, M, B;
    cout << "Введите количество строк матрицы: ";
    cin >> N;
    cout << "Введите количество столбцов матрицы: ";
    cin >> M;
    cout << "Введите число B: ";
    cin >> B;

    int A[N][M];
    int C[N * M]; 
    int count = 0; 

    for(int i = 0; i < N; i++) {
        for(int j = 0; j < M; j++) {
            cout << "Введите элемент A[" << i << "][" << j << "]: ";
            cin >> A[i][j];
            if(abs(A[i][j]) > B) {
                C[count++] = A[i][j];
            }
        }
    }

    cout << "Количество элементов, превышающих по абсолютной величине число B: " << count << endl;
    cout << "Элементы, превышающие по абсолютной величине число B: ";
    for(int i = 0; i < count; i++) {
        cout << C[i] << " ";
    }

    return 0;
}



4.15)

#include <iostream>

using namespace std;

int main() {
    int B[5][5] = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}, {16, 17, 18, 19, 20}, {21, 22, 23, 24, 25}};
    int sum = 0;
    for(int i = 0; i < 5; i++) {
        for(int j = i+1; j < 5; j++) {
            sum += B[i][j];
        }
    }
    cout << "Сумма элементов выше левой диагонали массива B составляет " << sum << endl;
    return 0;

4.16)

#include <iostream>

using namespace std;

const int SIZE = 5;

int main() {
    int matrix[SIZE][SIZE] = {{1, -2, 3, -4, 5},
                              {6, 7, 8, 9, 10},
                              {11, 12, 13, 14, 15},
                              {16, 17, 18, 19, 20},
                              {21, 22, 23, 24, 25}};

    cout << "Original matrix:" << endl;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    for (int j = 0; j < SIZE; j++) {
        if (matrix[0][j] < 0) {
            matrix[0][j] = 0;
        }
    }

    cout << "Modified matrix:" << endl;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


4.17)

#include <iostream>
#include <cstdlib>
#include <cmath>

using namespace std;

int main()
{
    int a[5][5];
    int maxElement = 0;

    for(int i = 0; i < 5; i++) {
        for(int j = 0; j < 5; j++) {
            a[i][j] = rand() % 20 - 10; 
            cout << a[i][j] << "\t";
            if(abs(a[i][j]) > maxElement) {
                maxElement = abs(a[i][j]);
            }
        }
        cout << endl;
    }

    cout << endl << "Max element: " << maxElement << endl << endl;

    for(int i = 0; i < 5; i++) {
        for(int j = 0; j < 5; j++) {
            a[i][j] = round(a[i][j] / (double)maxElement * 100) / 100.0; 
            cout << a[i][j] << "\t";
        }
        cout << endl;
    }

    return 0;
}


4.18)


#include <iostream>
using namespace std;

int main()
{
    const int M = 5;
    const int N = 4;
    int a[M][N] = {{3, 1, 4, 6}, {7, 2, 5, 8}, {9, 10, 12, 11}, {13, 16, 15, 14}, {18, 17, 20, 19}};

    for (int j = 0; j < N; j++)
    {
        if (j % 2 == 0) 
        {
            for (int i = 0; i < M - 1; i++)
            {
                for (int k = i + 1; k < M; k++)
                {
                    if (a[i][j] > a[k][j])
                    {
                        int temp = a[i][j];
                        a[i][j] = a[k][j];
                        a[k][j] = temp;
                    }
                }
            }
        }
        else 
        {
            for (int i = 0; i < M - 1; i++)
            {
                for (int k = i + 1; k < M; k++)
                {
                    if (a[i][j] < a[k][j])
                    {
                        int temp = a[i][j];
                        a[i][j] = a[k][j];
                        a[k][j] = temp;
                    }
                }
            }
        }
    }
    
    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cout << a[i][j] << "\t";
        }
        cout << endl;
    }

    return 0;
}



4.19)

#include <iostream>

int main() {
    const int rows = 8;
    const int cols = 5;
    int matrix[rows][cols] = {
        {4, 2, 8, 4, 5},
        {6, 7, 8, 9, 10},
        {1, 2, 32, 24, 5},
        {6, 17, 1, 19, 20},
        {21, 22, 3, 24, 2},
        {26, 7, 18, 9, 30},
        {1, 32, 33, 34, 35},
        {0, 32, 8, 9, 20}
    };

    int sum_col_2 = 0;
    for (int i = 0; i < rows; i++) {
        sum_col_2 += matrix[i][1]; 
    }
    std::cout << "Сумма всех элементов второго столбца массива: " << sum_col_2 << std::endl;

    int sum_row_3 = 0;
    for (int j = 0; j < cols; j++) {
        sum_row_3 += matrix[2][j]; 
    }
    std::cout << "Сумма всех элементов третьей строки массива: " << sum_row_3 << std::endl;

    return 0;
}



4.20)



#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main() {
    srand(time(NULL)); 

    const int M = 5; 
    const int N = 6; 

    int matrix[M][N]; 
    int array[M*N]; 
    int counter = 0; 

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            matrix[i][j] = rand() % 100 + 1;
        }
    }

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            if (matrix[i][j] >= 1 && matrix[i][j] <= 20) {
                array[counter] = matrix[i][j];
                counter++;
            }
        }
    }

    cout << "Matrix:" << endl;
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    cout << "Array:" << endl;
    for (int i = 0; i < counter; i++) {
        cout << array[i] << " ";
    }
    cout << endl;

    double sum = 0;
    for (int i = 0; i < counter; i++) {
        sum += array[i];
    }
    double average = sum / counter;

    cout << "Average: " << average << endl;

    return 0;
}



4.21)


#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main() {
    srand(time(NULL)); 

    const int M = 5; 
    const int N = 6; 
    int matrix[M][N]; 
    int array[M*N]; 
    int counter = 0; 

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            matrix[i][j] = rand() % 100 + 1;
        }
    }

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            if (matrix[i][j] >= 1 && matrix[i][j] <= 10) {
                array[counter] = matrix[i][j];
                counter++;
            }
        }
    }

    cout << "Matrix:" << endl;
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    cout << "Array:" << endl;
    for (int i = 0; i < counter; i++) {
        cout << array[i] << " ";
    }
    cout << endl;

    int product = 1;
    for (int i = 0; i < counter; i++) {
        product *= array[i];
    }

    cout << "Product: " << product << endl;

    return 0;
}


4.22)


#include <iostream>

using namespace std;

int main() {
    const int N = 5; 

    int matrix[N][N]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    for (int i = 0; i < N; i++) {
        int max_element = matrix[i][0]; 
        int max_index = 0; 
        for (int j = 1; j < N; j++) {
            if (matrix[i][j] > max_element) {
                max_element = matrix[i][j];
                max_index = j;
            }
        }

        int temp = matrix[i][i];
        matrix[i][i] = max_element;
        matrix[i][max_index] = temp;
    }

    cout << "Modified matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


4.23)
#include <iostream>

using namespace std;

int main() {
    const int N = 3; 
    int matrix[N][N]; 


    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    int min_count = N + 1; 
    int min_column = -1; 
    for (int j = 0; j < N; j++) {
        int count = 0; 
        for (int i = 0; i < N; i++) {
            if (matrix[i][j] % (i + j) == 0) {
                count++;
            }
        }

        if (count < min_count) {
            min_count = count;
            min_column = j;
        }
    }

    if (min_column == -1) {
        cout << "There is no column with elements that are multiples of the sum of indices." << endl;
    } else {
        cout << "Column with the smallest number of elements that are multiples of the sum of indices: " << min_column + 1 << endl;
    }

    return 0;
}


4.24)

#include <iostream>

using namespace std;

int main() {
    const int N = 3;
    int matrix[N][N]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    int sum = 0; 

    for (int i = 0; i < N; i++) {
        for (int j = i + 1; j < N; j++) {
            sum += matrix[i][j];
        }
    }

    cout << "Sum of elements above the main diagonal: " << sum << endl;

    return 0;
}

4.25)

#include <iostream>

using namespace std;

int main() {
    const int N = 3; 

    int matrix[N][N]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    bool is_symmetric = true; 

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < i; j++) {
            if (matrix[i][j] != matrix[j][i]) {
                is_symmetric = false;
                break;
            }
        }
        if (!is_symmetric) {
            break;
        }
    }

    if (is_symmetric) {
        cout << "The matrix is symmetric with respect to its main diagonal" << endl;
    } else {
        cout << "The matrix is not symmetric with respect to its main diagonal" << endl;
    }

    return 0;
}

4.26)


#include <iostream>

using namespace std;

int main() {
    const int N = 3; 

    int matrix[N][N]; 
    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original matrix:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    bool is_symmetric = true; 
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < i; j++) {
            if (matrix[i][j] != matrix[j][i]) {
                is_symmetric = false;
                break;
            }
        }
        if (!is_symmetric) {
            break;
        }
    }

    if (is_symmetric) {
        cout << "The matrix is symmetric with respect to its main diagonal" << endl;
    } else {
        cout << "The matrix is not symmetric with respect to its main diagonal" << endl;
    }

    return 0;
}


4.27)

#include <iostream>

int main() {
int a[3][3], n, m; 
std::cin >> n >> m;
for (int i = 0; i < n * m; i++)
a[i / m][i % m] = (i / m) * (i % m);

for (int i = 0; i < n; i++) {
for (int j = 0; j < m; j++)
std::cout << a[i][j] << ' ';
std::cout << '\n';
}

return 0;
}


4.28)

#include <iostream>

using namespace std;

int main() {
    const int N = 5; 
    const int M = 4; 

    int matrix[N][M]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> matrix[i][j];
        }
    }

    int minCount = M; 
    int minIndex = -1; 

    for (int i = 0; i < N; i++) {
        int count = 1; 
        for (int j = 1; j < M; j++) {
            if (matrix[i][j] == matrix[i][j-1]) {
                count++;
            } else {
                count = 1;
            }
        }
        if (count < minCount) {
            minCount = count;
            minIndex = i;
        }
    }

    if (minIndex == -1) {
        cout << "All rows have the same number of elements" << endl;
    } else {
        cout << "Row " << minIndex << " has the minimum number of identical elements: " << minCount << endl;
    }

    return 0;
}

4.29)

#include <iostream>

using namespace std;

int main() {
    const int N = 5; 

    int matrix[N][N]; 

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matrix[i][j];
        }
    }

    int product = 1; 
    for (int i = 1; i < N; i++) {
        for (int j = 0; j < i; j++) {
            product *= matrix[i][j];
        }
    }

    cout << "The product of elements below the main diagonal is " << product << endl;

    return 0;
}

4.30)


#include <iostream>

using namespace std;

int main() {
    const int N = 4; 
    const int M = 4; 

    int matrix[N][M]; 


    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> matrix[i][j];
        }
    }

    int max_count = 0; 
    int max_row = -1; 

    for (int i = 0; i < N; i++) {
        int count = 1; 
        for (int j = 0; j < M - 1; j++) {
            if (matrix[i][j] == matrix[i][j+1]) {
                count++;
            } else {
                if (count > max_count) {
                    max_count = count;
                    max_row = i;
                }
                count = 1;
            }
        }
        if (count > max_count) {
            max_count = count;
            max_row = i;
        }
    }

    // вывод результата
    if (max_row != -1) {
        cout << "The row with the maximum number of identical elements is " << max_row + 1 << endl;
    } else {
        cout << "There are no identical elements in the matrix" << endl;
    }

    return 0;
}






