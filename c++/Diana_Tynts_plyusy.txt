//самостоятельная базовая 1, №Begin 19
#include <iostream>
#include <cmath>

double calculatePerimeter(double x1, double y1, double x2, double y2) {
    double length = std::abs(x2 - x1);
    double width = std::abs(y2 - y1);
    
    return 2 * (length + width);
}

double calculateArea(double x1, double y1, double x2, double y2) {
    double length = std::abs(x2 - x1);
    double width = std::abs(y2 - y1);
    
    return length * width;
}

int main() {
    double x1, y1, x2, y2;
    std::cout << "Введите координаты двух противоположных вершин прямоугольника:" << std::endl;
    std::cout << "x1: ";
    std::cin >> x1;
    std::cout << "y1: ";
    std::cin >> y1;
    std::cout << "x2: ";
    std::cin >> x2;
    std::cout << "y2: ";
    std::cin >> y2;
    
    double perimeter = calculatePerimeter(x1, y1, x2, y2);
    double area = calculateArea(x1, y1, x2, y2);
    
    std::cout << "Периметр прямоугольника: " << perimeter << std::endl;
    std::cout << "Площадь прямоугольника: " << area << std::endl;
    
    return 0;
}


//самостоятельная базовая 1, №Integer 30

#include <iostream>

int calculateCentury(int year) {
    int century = (year - 1) / 100 + 1;
    return century;
}

int main() {
    int year;
    std::cout << "Введите номер года: ";
    std::cin >> year;
    
    int century = calculateCentury(year);
    
    std::cout << "Номер столетия: " << century << std::endl;
    
    return 0;
}


//самостоятельная продвинутый 1, №3
#include <iostream>
#include <cmath>

const double g = 9.8; // Ускорение свободного падения (м/с^2)

void calculateInitialVelocityAndAngle(double H, double L, double& V, double& alpha) {
    double alphaRad = atan(4 * H / L); // Угол альфа в радианах
    
    alpha = alphaRad * 180 / M_PI; // Угол альфа в градусах
    
    V = sqrt(g * L / sin(2 * alphaRad));
}

int main() {
    double H, L;
    std::cout << "Введите максимальную высоту подъема (H): ";
    std::cin >> H;
    std::cout << "Введите дальность полета (L): ";
    std::cin >> L;
    
    double V, alpha;
    calculateInitialVelocityAndAngle(H, L, V, alpha);
    
    std::cout << "Начальная скорость (V): " << V << " м/с" << std::endl;
    std::cout << "Угол альфа: " << alpha << " градусов" << std::endl;
    
    return 0;
}







//самостоятельная базовая 3, №5.93(г)
#include <iostream>
#include <cmath>

double nestedSquareRoot(int n) {
    double result = std::sqrt(3 * n);
    
    for (int i = n - 1; i >= 1; i--) {
        result = std::sqrt(3 * i + result);
    }
    
    return result;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    double answer = nestedSquareRoot(n);
    
    std::cout << "Ответ: " << answer << std::endl;
    
    return 0;
}



//самостоятельная базовая 3, №6.8

#include <iostream>
#include <cmath>

void printNumbers(int n) {
    int i = 1;
    int square = 1;
    
    while (square <= n) {
        std::cout << square << " ";
        i++;
        square = i * i;
    }
    
    std::cout << std::endl;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    std::cout << "Числа, не превышающие " << n << ": ";
    printNumbers(n);
    
    return 0;
}


//самостоятельная базовая 3, №6.9
#include <iostream>
#include <cmath>

int findFirstNumberGreaterThanN(int n) {
    int i = 1;
    int square = 1;
    
    while (square <= n) {
        i++;
        square = i * i;
    }
    
    return square;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    int firstNumber = findFirstNumberGreaterThanN(n);
    
    std::cout << "Первое число больше " << n << ": " << firstNumber << std::endl;
    
    return 0;
}


//самостоятельная базовая 3, №6.10(а)

#include <iostream>
#include <cmath>

void printSquares(int n) {
    int number = 1;
    
    while (number * number <= n) {
        std::cout << number * number << " ";
        number++;
    }
    
    std::cout << std::endl;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    std::cout << "Квадраты чисел, не превышающие " << n << ": ";
    printSquares(n);
    
    return 0;
}



//самостоятельная базовая 3, №6.10(б)

#include <iostream>
#include <cmath>

int findFirstSquareGreaterThanN(int n) {
    int number = 1;
    
    while (number * number <= n) {
        number++;
    }
    
    return number;
}

int main() {
    int n;
    std::cout << "Введите значение n: ";
    std::cin >> n;
    
    int firstNumber = findFirstSquareGreaterThanN(n);
    
    std::cout << "Первое натуральное число, квадрат которого больше " << n << ": " << firstNumber << std::endl;
    
    return 0;
}




//самостоятельная базовая 3, №6.11

#include <iostream>

void printNumbers(double a) {
    double number = 1.0;
    double increment = 2.0;
    
    while (number < a) {
        std::cout << number << " ";
        number += 1.0 / increment;
        increment++;
    }
    
    std::cout << std::endl;
}

int main() {
    double a;
    std::cout << "Введите значение a: ";
    std::cin >> a;
    
    std::cout << "Числа, не меньшие " << a << ": ";
    printNumbers(a);
    
    return 0;
}



//самостоятельная базовая 3, №6.12

#include <iostream>

double findFirstNumberLessThanA(double a) {
    double number = 1.0;
    double increment = 2.0;
    
    while (number >= a) {
        number += 1.0 / increment;
        increment++;
    }
    
    return number;
}

int main() {
    double a;
    std::cout << "Введите значение a: ";
    std::cin >> a;
    
    double firstNumber = findFirstNumberLessThanA(a);
    
    std::cout << "Первое число меньше " << a << ": " << firstNumber << std::endl;
    
    return 0;
}



//самостоятельная базовая 3, № w6

#include <iostream>

double doubleFactorial(int N) {
    double result = 1.0;
    
    if (N % 2 == 0) {
        for (int i = N; i >= 2; i -= 2) {
            result *= i;
        }
    } else {
        for (int i = N; i >= 1; i -= 2) {
            result *= i;
        }
    }
    
    return result;
}

int main() {
    int N;
    std::cout << "Введите значение N: ";
    std::cin >> N;
    
    double doubleFact = doubleFactorial(N);
    
    std::cout << "Двойной факториал числа " << N << ": " << doubleFact << std::endl;
    
    return 0;
}



//самостоятельная базовый 4, №3.11
#include <iostream>

void countEvenOddNumbers(int arr[][m], int n, int m, int& evenCount, int& oddCount) {
    evenCount = 0;
    oddCount = 0;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (arr[i][j] % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
    }
}

int main() {
    int n, m;
    std::cout << "Введите количество строк: ";
    std::cin >> n;
    std::cout << "Введите количество столбцов: ";
    std::cin >> m;
    
    int arr[n][m];
    
    std::cout << "Введите элементы массива:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> arr[i][j];
        }
    }
    
    int evenCount, oddCount;
    countEvenOddNumbers(arr, n, m, evenCount, oddCount);
    
    std::cout << "Количество четных чисел: " << evenCount << std::endl;
    std::cout << "Количество нечетных чисел: " << oddCount << std::endl;
    
    return 0;
}



//самостоятельная базовый 4, №3.12
#include <iostream>

int countOccurrences(int arr[][m], int n, int m) {
    int count = 0;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (arr[i][j] == 7) {
                count++;
            }
        }
    }
    
    return count;
}

int main() {
    int n, m;
    std::cout << "Введите количество строк: ";
    std::cin >> n;
    std::cout << "Введите количество столбцов: ";
    std::cin >> m;
    
    int arr[n][m];
    
    std::cout << "Введите элементы массива:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> arr[i][j];
        }
    }
    
    int occurrences = countOccurrences(arr, n, m);
    
    std::cout << "Число 7 встречается " << occurrences << " раз(а)" << std::endl;
    
    return 0;
}




//самостоятельная базовый 4, №3.13
#include <iostream>

void findMaxInColumns(int arr[][m], int n, int m) {
    for (int j = 0; j < m; j++) {
        int maxElement = arr[0][j];
        
        for (int i = 1; i < n; i++) {
            if (arr[i][j] > maxElement) {
                maxElement = arr[i][j];
            }
        }
        
        std::cout << "Наибольший элемент в столбце " << j+1 << ": " << maxElement << std::endl;
    }
}

int main() {
    int n, m;
    std::cout << "Введите количество строк: ";
    std::cin >> n;
    std::cout << "Введите количество столбцов: ";
    std::cin >> m;
    
    int arr[n][m];
    
    std::cout << "Введите элементы массива:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> arr[i][j];
        }
    }
    
    findMaxInColumns(arr, n, m);
    
    return 0;
}


//самостоятельная базовый 4, №3.14
#include <iostream>
#include <limits>

void findMinIndex(int arr[][m], int n, int m, int& rowIndex, int& colIndex) {
    int minElement = std::numeric_limits<int>::max();
    rowIndex = -1;
    colIndex = -1;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (arr[i][j] < minElement) {
                minElement = arr[i][j];
                rowIndex = i;
                colIndex = j;
            }
        }
    }
}

int main() {
    int n, m;
    std::cout << "Введите количество строк: ";
    std::cin >> n;
    std::cout << "Введите количество столбцов: ";
    std::cin >> m;
    
    int arr[n][m];
    
    std::cout << "Введите элементы массива:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> arr[i][j];
        }
    }
    
    int rowIndex, colIndex;
    findMinIndex(arr, n, m, rowIndex, colIndex);
    
    if (rowIndex != -1 && colIndex != -1) {
        std::cout << "Индексы первого наименьшего элемента: (" << rowIndex << ", " << colIndex << ")" << std::endl;
    } else {
        std::cout << "Массив пуст или некорректный размер" << std::endl;
    }
    
    return 0;
}



//самостоятельная продвинутый 4, №18
// данной программе функция evaluateFunction вычисляет значение функции f(x) для заданного x и 
//коэффициентов a[k]. Функция evaluateDerivative вычисляет значение производной функции f(x) для 
//заданного x и коэффициентов a[k]. Функция solveEquationNewton решает уравнение методом Ньютона, 
//используя начальное приближение initialGuess и требуемую точность tolerance. В функции main считываются 
//степень уравнения, коэффициенты, начальное приближение и требуемая точность с помощью стандартного ввода. 
//Затем вызывается функция solveEquationNewton и решение уравнения выводится на экран

#include <iostream>
#include <cmath>

double evaluateFunction(double x, double* coefficients, int degree) {
    double sum = 0.0;
    
    for (int k = 0; k <= degree; k++) {
        sum += coefficients[k] * pow(x, k);
    }
    
    return sum;
}

double evaluateDerivative(double x, double* coefficients, int degree) {
    double sum = 0.0;
    
    for (int k = 1; k <= degree; k++) {
        sum += k * coefficients[k] * pow(x, k - 1);
    }
    
    return sum;
}

double solveEquationNewton(double* coefficients, int degree, double initialGuess, double tolerance) {
    double x0 = initialGuess;
    double x1 = x0;
    
    do {
        x0 = x1;
        x1 = x0 - evaluateFunction(x0, coefficients, degree) / evaluateDerivative(x0, coefficients, degree);
    } while (std::abs(x1 - x0) > tolerance);
    
    return x1;
}

int main() {
    int degree;
    std::cout << "Введите степень уравнения: ";
    std::cin >> degree;
    
    double coefficients[degree + 1];
    std::cout << "Введите коэффициенты уравнения:" << std::endl;
    for (int k = 0; k <= degree; k++) {
        std::cout << "a[" << k << "]: ";
        std::cin >> coefficients[k];
    }
    
    double initialGuess;
    std::cout << "Введите начальное приближение: ";
    std::cin >> initialGuess;
    
    double tolerance;
    std::cout << "Введите требуемую точность: ";
    std::cin >> tolerance;
    
    double solution = solveEquationNewton(coefficients, degree, initialGuess, tolerance);
    
    std::cout << "Решение уравнения f(x) = 0: x = " << solution << std::endl;
    
    return 0;
}

